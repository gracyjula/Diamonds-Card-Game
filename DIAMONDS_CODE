import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import random
from collections import defaultdict
import pygame
import os

# Sound init
pygame.mixer.init()

def play_sound(filename):
    try:
        if os.path.exists(filename):
            sound = pygame.mixer.Sound(filename)
            sound.play()
    except:
        pass

# Game constants
SUITS = ['Hearts', 'Spades', 'Clubs', 'Diamonds']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']
POINTS = {str(i): 3 for i in range(2, 11)}
POINTS.update({'Jack': 10, 'Queen': 10, 'King': 10, 'Ace': 20})

def card_value(card):
    return RANKS.index(card[0])

def calculate_points(card):
    return POINTS[card[0]]

def create_deck():
    return [(rank, suit) for suit in SUITS for rank in RANKS]

def remove_diamonds(deck):
    diamonds = [card for card in deck if card[1] == 'Diamonds']
    others = [card for card in deck if card[1] != 'Diamonds']
    return diamonds, others

def deal_cards(non_diamonds):
    random.shuffle(non_diamonds)
    cards_per_player = len(non_diamonds) // 3
    return [non_diamonds[i * cards_per_player:(i + 1) * cards_per_player] for i in range(3)]

def ai_bid(player_hand, diamond_card):
    point_value = calculate_points(diamond_card)
    sorted_hand = sorted(player_hand, key=lambda c: card_value(c), reverse=True)
    if point_value >= 10:
        for card in sorted_hand:
            if card_value(card) > 8:
                player_hand.remove(card)
                return card
    card = sorted_hand[-1]
    player_hand.remove(card)
    return card

class CardBiddingGame:
    def _init_(self, root):
        self.root = root
        self.root.title("Diamonds - Card Bidding Game")

        self.canvas = tk.Canvas(root, width=900, height=700)
        self.canvas.pack(fill="both", expand=True)

        # Image paths
        base_path = "C:/Users/Admin/OneDrive/Desktop/"
        self.image_paths = {
            "start": base_path + "start_bg1.JPG",
            "title": base_path + "title_bg.JPG",
            "bid_reveal": base_path + "bid_reveal_bg.JPG",
            "winner": base_path + "winner_bg.JPG"
        }

        # Load images with fallback
        self.images = {}
        for key, path in self.image_paths.items():
            try:
                img = Image.open(path).resize((900, 700), Image.LANCZOS)
                self.images[key] = ImageTk.PhotoImage(img)
            except:
                print(f"{key} image not found at {path}. Using color.")
                fallback = Image.new("RGB", (900, 700), "gray" if key != "start" else "skyblue")
                self.images[key] = ImageTk.PhotoImage(fallback)

        # Show start screen
        self.bg_image_id = self.canvas.create_image(0, 0, image=self.images["start"], anchor="nw")
        self.frame = tk.Frame(self.canvas, bg='black')
        self.canvas.create_window(450, 350, window=self.frame)

        # Game variables
        self.player_names = ["Player 1", "Player 2", "Player 3"]
        self.human_count = 0
        self.is_human = []
        self.players_hands = []
        self.diamonds = []
        self.current_diamond = None
        self.scores = defaultdict(float)
        self.won_diamonds = defaultdict(list)
        self.bids = []
        self.current_player = 0

        play_sound("intro.mp3")
        self.root.after(3000, self.show_title_screen)

    def show_title_screen(self):
        self.canvas.itemconfig(self.bg_image_id, image=self.images["title"])
        self.setup_screen()

    def setup_screen(self):
        for widget in self.frame.winfo_children():
            widget.destroy()

        tk.Label(self.frame, text="DIAMONDS GAME", font=('Arial Black', 24), fg='cyan', bg='black').pack(pady=20)
        tk.Label(self.frame, text="How many human players? (1 to 3)", font=('Arial', 14), fg='white', bg='black').pack(pady=10)
        for i in range(1, 4):
            tk.Button(self.frame, text=f"{i} Human Player{'s' if i > 1 else ''}", width=20, font=('Arial', 12),
                      command=lambda i=i: self.get_names(i)).pack(pady=5)

    def get_names(self, human_count):
        self.human_count = human_count
        self.is_human = [True] * human_count + [False] * (3 - human_count)

        for widget in self.frame.winfo_children():
            widget.destroy()

        self.name_entries = []
        tk.Label(self.frame, text="Enter Player Names", font=('Arial', 14), fg='white', bg='black').pack(pady=10)

        for i in range(3):
            label = tk.Label(self.frame, text=f"Player {i+1} ({'Human' if self.is_human[i] else 'AI'}):", fg='white', bg='black')
            label.pack()
            entry = tk.Entry(self.frame)
            entry.insert(0, f"Player {i+1}")
            entry.pack()
            self.name_entries.append(entry)

        tk.Button(self.frame, text="Start Game", command=self.start_game, bg='lightgreen').pack(pady=10)

    def start_game(self):
        self.player_names = [entry.get() for entry in self.name_entries]

        deck = create_deck()
        self.diamonds, non_diamonds = remove_diamonds(deck)
        random.shuffle(self.diamonds)
        self.players_hands = deal_cards(non_diamonds)
        self.scores = defaultdict(float)
        self.won_diamonds = defaultdict(list)
        self.play_next_round()

    def play_next_round(self):
        if not self.diamonds:
            play_sound("end.mp3")
            self.end_game()
            return

        self.current_diamond = self.diamonds.pop(0)
        self.bids = []
        self.current_player = 0
        self.next_player_turn()

    def next_player_turn(self):
        if self.current_player >= 3:
            self.reveal_bids()
            return

        while self.current_player < 3 and not self.players_hands[self.current_player]:
            self.current_player += 1

        if self.current_player >= 3:
            self.reveal_bids()
            return

        for widget in self.frame.winfo_children():
            widget.destroy()

        tk.Label(self.frame, text=f"Diamond for this round: {self.current_diamond[0]} of {self.current_diamond[1]} "
                                  f"({calculate_points(self.current_diamond)} pts)",
                 font=('Arial', 14), fg='yellow', bg='black').pack(pady=10)

        tk.Label(self.frame, text=f"{self.player_names[self.current_player]}'s Turn", font=('Arial', 12), fg='white', bg='black').pack(pady=5)

        if self.is_human[self.current_player]:
            for card in self.players_hands[self.current_player]:
                card_str = f"{card[0]} of {card[1]}"
                btn = tk.Button(self.frame, text=card_str, width=20, font=('Arial', 10), bg='lightblue',
                                command=lambda c=card: self.submit_bid(c))
                btn.pack(pady=2)
        else:
            self.root.after(1000, self.ai_turn)

    def ai_turn(self):
        card = ai_bid(self.players_hands[self.current_player], self.current_diamond)
        self.bids.append((card, self.current_player))
        play_sound("bid.mp3")
        self.current_player += 1
        self.next_player_turn()

    def submit_bid(self, card):
        self.players_hands[self.current_player].remove(card)
        self.bids.append((card, self.current_player))
        play_sound("bid.mp3")
        self.current_player += 1
        self.next_player_turn()

    def reveal_bids(self):
        self.canvas.itemconfig(self.bg_image_id, image=self.images["bid_reveal"])

        for widget in self.frame.winfo_children():
            widget.destroy()

        tk.Label(self.frame, text="--- Bids Revealed ---", font=('Arial', 14), fg='orange', bg='black').pack(pady=10)
        for card, pid in self.bids:
            tag = "(You)" if self.is_human[pid] and pid == 0 else "(Human)" if self.is_human[pid] else "(AI)"
            tk.Label(self.frame, text=f"{self.player_names[pid]} {tag} bid: {card[0]} of {card[1]}", fg='white', bg='black').pack()

        max_val = max(card_value(c) for c, _ in self.bids)
        winners = [(pid, c) for c, pid in self.bids if card_value(c) == max_val]
        points = calculate_points(self.current_diamond)
        share = points / len(winners)

        for pid, _ in winners:
            self.scores[pid] += share
            self.won_diamonds[pid].append(self.current_diamond)
            winner_text = f"{self.player_names[pid]} wins {share:.1f} points!"
            label = tk.Label(self.frame, text=winner_text, fg='lightgreen', bg='black', font=('Arial', 12, 'bold'))
            label.pack()
            play_sound("win.mp3")

        self.root.after(2000, self.play_next_round)

    def end_game(self):
        self.canvas.itemconfig(self.bg_image_id, image=self.images["winner"])

        for widget in self.frame.winfo_children():
            widget.destroy()

        tk.Label(self.frame, text="=== Final Scores ===", font=('Arial', 14), fg='red', bg='black').pack(pady=10)
        for i in range(3):
            tag = "(You)" if self.is_human[i] and i == 0 else "(Human)" if self.is_human[i] else "(AI)"
            score_text = f"{self.player_names[i]} {tag}: {self.scores[i]:.1f} points"
            tk.Label(self.frame, text=score_text, fg='white', bg='black').pack()

        tk.Label(self.frame, text="\nDiamonds Won:", font=('Arial', 12), fg='cyan', bg='black').pack(pady=10)
        for i in range(3):
            won = ', '.join(f"{c[0]} of {c[1]}" for c in self.won_diamonds[i]) or "None"
            tag = "(You)" if self.is_human[i] and i == 0 else "(Human)" if self.is_human[i] else "(AI)"
            tk.Label(self.frame, text=f"{self.player_names[i]} {tag}: {won}", fg='white', bg='black').pack()

        tk.Button(self.frame, text="Play Again", command=self.setup_screen, bg='lightgreen').pack(pady=10)
        tk.Button(self.frame, text="Quit", command=self.root.quit, bg='salmon').pack()

if __name__ == "__main__":
    root = tk.Tk()
    game = CardBiddingGame(root)
    root.mainloop()
